---
format:
  html:
    code-fold: true
    freeze: false
params:
  show_table: TRUE
---

```{r}
#| label: output type
#| echo: false
#| warning: false
#| message: false

out_type <- knitr::opts_chunk$get("rmarkdown.pandoc.to")
```

# Preface {.unnumbered .unlisted}

Here is the documentation of the data harmonisation step generated using [Quarto](https://quarto.org/). To learn more about Quarto books visit <https://quarto.org/docs/books>.

## Acknowledgement

Layout of this page is inspired from R package [`rcompendium`](https://frbcesab.github.io/rcompendium).

## File Structure

Here is the file structure of this project.

```
harmonisation_template/                   # Root of the compendium
│
├── harmonisation_template.Rproj          # RStudio project file
|
├── .quarto/                              # Intermediate files/folders generated 
|                                         # Quarto renders to the documents.
|
├── archive/                              # Folder to keep previous books and harmonised data
│   ├── reports/                          # Folder containing previous documentation 
|   |                                     # of data harmonisation 
|   └── harmonised/                       # Folder containing previous GPS-CAD harmonised data
|  
├── reports/                              # Documentation of data harmonisation 
│  
├── data-raw/                             # Cohort raw data (.csv, .gpkg, etc.)
│   ├── {cohort name}/                    # Folder containing cohort raw data,
|   |                                     # and data dictionary 
|   └── data-dictionary/                  # Data dictionary for harmonised data
|   └── data-input/                       # Data input file from collaborators
|  
├── docs/                                 # R functions documentation generating using
|                                         # pkgdown:::build_site_external()
|  
├── inst/                                 # Arbitrary additional files to include in the
|   |                                     # package.
|   |  
|   └── WORDLIST                          # File generating by spelling::update_wordlist()
|  
├── man/                                  # R functions helps (automatically updated)
│   ├── {fun-demo}.Rd                     # Documentation of the demo R function
│   └── harmonisation-template.Rd         # High-level documentation
|  
├── quarto-yaml-template/                 # Folder containing template files for quarto book generation
│   ├── _quarto_{cohort name}.yml         # Quarto book generation for each cohort
│   └── _quarto_all.yml                   # Quarto book generation for all cohorts
|  
├── R/                                    # R functions location
│   ├── {fun-demo}.R                      # Example of an R function
│   └── harmonisation-template-package.R  # Dummy R file for high-level documentation
│  
├── renv/                                 # Folder that contains all packages 
|                                         # installed in the renv environment.
|        
├── codes/                                # R/Quarto scripts to run data harmonisation
|   ├── quarto_script.R                   # R script to render each {cohort name}_Cleaning/ folder. 
|   |                                     # folder into html, pdf and word document.
│   ├── {cohort name}_Cleaning/           # Quarto scripts to run data harmonisation
|   |                                     # and output them for each cohort.
|   └── Combine/                          # Quarto scripts to filter harmonised data
|                                         # based on inclusion/exclusion criteria, 
|   |                                     # combined the filtered data for preliminary analysis.
|        
├── tests/                                # Test units file created by R package testhat
│        
├── .lintr                                # Configuration for linting
|                                         # R projects and packages using linter
|        
├── .Rbuildignore                         # List of files/folders to be ignored while 
│                                         # checking/installing the package
|        
├── .renvignore                           # List of files/folders to be ignored when 
│                                         # renv is doing its snapshot
|        
├── _pkgdown.yml                          # Configuration for R package documentation
|                                         # using pkgdown:::build_site_external()
|        
├── _quarto.yml                           # Configuration for Quarto book generation
|                                         # Also the project configuration file
|        
├── custom-reference.docx                 # Microsoft word template for data harmonisation 
|                                         # documentation to Word
|        
├── DESCRIPTION                           # Project metadata[*]
|        
├── index.qmd                             # Home page of Quarto book content
|        
├── LICENSE                               # Content of the MIT license generated via
|                                         # usethis::use_mit_license()
├── LICENSE.md                            # Content of the MIT license generated via
|                                         # usethis::use_mit_license()
|        
├── NAMESPACE                             # Automatically generated
│        
├── README.md                             # GitHub README (automatically generated)
├── README.Rmd                            # GitHub README (ignore for now)
│      
|      
├── references.bib                        # Bibtex file for Quarto book 
|      
├── references.qmd                        # Reference document for Quarto book
|      
├── renv.lock                             # Metadata of R packages installed generated
|                                         # using renv::snapshot
|      
├── csl_file.csl                          # Citation Style Language (CSL) file to ensure
|                                         # citations follows the Lancet journal


[*] These files are automatically created but user needs to manually add some information.
```

## Installation

### Installing R

Go to <https://cran.rstudio.com/>. Choose a version of R that matches the computer’s operating system.

### Installing RStudio

Go to <https://posit.co/download/rstudio-desktop/>. Scroll down and choose a version of RStudio that matches the computer’s operating system.

### Installing Rtools

Go to <https://cran.r-project.org/bin/windows/Rtools/>. Choose a version of Rtools that matches the R version that was installed.

### Quarto

Quarto converts R scripts into a technical report or notebook in html, pdf, Microsoft Word, [etc.](https://quarto.org/docs/output-formats/all-formats.html) It is installed together with RStudio. User can also go to <https://quarto.org/docs/get-started/> to install it separately. For Quarto to be able to create pdf files, a [pdf engine](https://quarto.org/docs/output-formats/pdf-engine.html) must be installed as well. For ease, it is suggested to install [TinyTex](https://yihui.org/tinytex/) using the terminal command `quarto install tinytex`.

## R Package Installation

Use Posit Public Package Manager [PPM](https://packagemanager.posit.co/client) to set up your repository environment to install R packages from [CRAN](https://cloud.r-project.org/). This is because PPM allows installation of frozen R package versions based on a snapshot date.

One way to do that is to set in the `.Rprofile` file with the code `options(repos = c(P3M = "{link to repository url form Posit Public Package Manager}"))`

R packages can be installed using the package [`pak`](https://pak.r-lib.org/) as an alternative to [`install.packages()`](https://rdrr.io/r/utils/install.packages.html) and [`remotes`::install_github()`](https://remotes.r-lib.org/reference/install_github.html). Benefits of using [`pak`](https://pak.r-lib.org/) can be found [here](https://pak.r-lib.org/reference/features.html)

You can also view your respository environment using the command [`pak::repo_get()`](https://pak.r-lib.org/reference/repo_get.html)

R package can be loaded using the command `library({package_name})`. You can use the R package [`annotater`](https://annotater.liomys.mx/) to add additional information on what the loaded package does. 

## Using `renv`

You can increase reproducibility by using the package [`renv`](https://rstudio.github.io/renv/). Install `renv` from CRAN with `pak::pak("renv")`. If this is your first time using `renv`, start with the [`Introduction to renv vignette`](https://rstudio.github.io/renv/articles/renv.html). Use `renv::init(bare = TRUE)` to start with an empty `renv` environment.

`renv` will freeze the exact package versions you depend on (in `renv.lock`). 
This ensures that each collaborator (or you in the future) will use the exact same versions of these packages. Moreover `renv` provides to each project its own private package library making each project isolated from others.

Install required dependencies locally with `install.packages()` or [`renv::install()`](https://rstudio.github.io/renv/reference/install.html) from CRAN, Bioconductor, Github, explicit file path, etc.

Sometimes the right [downloader](https://community.rstudio.com/t/can-not-install-packages-after-initializing-renv/106064) (libcurl or others) needs to set for installation of R packages inside the `renv` environment to be successful. Setting the R environmental variable RENV_DOWNLOAD_FILE_METHOD = "libcurl" may help.

Save the local environment with [`renv::snapshot()`](https://rstudio.github.io/renv/reference/snapshot.html) to create the `renv.lock` file.

## R Functions Management

R functions heavily used in this project can be found in the `R` folder. Documentation (`man` folder), test units (`test` folder) corresponding to these functions are structured the same as creating an R package. Relevant R packages required for R package development (and available on Posit Public Package Manager [PPM](https://packagemanager.posit.co/client)) are

```{r}
#| label: R Package development packages
#| echo: true
#| warning: false
#| message: false

library("usethis")
library("devtools")
library("roxygen2")
library("testthat")
library("covr")
library("spelling")
library("lintr")
library("sinew")
library("pkgdown")


```

Here is an example of the command to use `pak::pak("{package name}")` to install packages from [PPM](https://packagemanager.posit.co/client).

There is no need to source the functions in the R folder. Use [`devtools::load_all()`](https://devtools.r-lib.org/reference/load_all.html) instead. [`devtools::load_all()`](https://devtools.r-lib.org/reference/load_all.html) will load required dependencies listed in `DESCRIPTION` and R functions stored in `R/`. Prior installation of these dependencies is required for the load to be successful.

After loading, R functions can be documented (using [`devtools::document()`](https://devtools.r-lib.org/reference/document.html)), tested (using [`devtools::test()`](https://devtools.r-lib.org/reference/test.html) and then [`devtools::check()`](https://devtools.r-lib.org/reference/check.html)) and even installed as an R package (using [`devtools::install`](https://devtools.r-lib.org/reference/install.html)).

More information of this workflow can be found in [Chapter 1: The Whole Game](https://r-pkgs.org/whole-game.html) of the R Packages (2e) book.


## R Packages

R packages installed from Posit Public Package Manager [PPM](https://packagemanager.posit.co/client) using command `pak::pak("{package name}")` are

```{r}
#| label: load cran libraries
#| echo: true
#| warning: false
#| message: false

library("renv")
library("sessioninfo")
library("knitr")
library("rmarkdown")
library("quarto")
library("rlang")
library("cli")

library("fs")
library("here")
library("fst")
library("readxl")
library("vroom")

library("dplyr")
library("tidyr")
library("magrittr")
library("stringr")
library("forcats")
library("purrr")
library("lubridate")
library("tibble")
library("glue")

library("collateral")
library("pointblank")
library("testthat")

library("htmltools")
library("htmlwidgets")
library("fontawesome")
library("reactable")
library("flextable")

library("openxlsx")

library("harmonisation")

```

Here are all the R packages used in this analysis.

::: {.content-visible when-format="html"}

```{r}
#| label: packages info html
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  harmonisation::get_r_package_info() |>
    reactable::reactable()
}

```

:::

::: {.content-visible unless-format="html"}

```{r}
#| label: packages info not html
#| eval: !expr out_type != "html"

harmonisation::get_r_package_info() |> 
  knitr::kable()

```

:::

## R Platform Information

Here are the R platform environment used in this analysis.

::: {.content-visible when-format="html"}

```{r}
#| label: session info html
#| eval: !expr out_type == "html"

if (params$show_table && knitr::is_html_output()) {
  r_platform_table <- harmonisation::get_r_platform_info()
  r_platform_table |>
    reactable::reactable(
      defaultPageSize = 5
    )
}

```

:::

::: {.content-visible unless-format="html"}

```{r}
#| label: session info not html
#| eval: !expr out_type != "html"

harmonisation::get_r_platform_info() |> 
  knitr::kable()

```

:::

## DESCRIPTION

The `DESCRIPTION` file contains important compendium metadata. Though `DESCRIPTION` file is specific to R package, it can be used to work with
research compendia (see below). For further information on how to edit this file, please read [https://r-pkgs.org/description.html](https://r-pkgs.org/description.html).

## Data Harmonisation

To start the harmonisation of data, run the R script `quarto_script.R` in `reports` folder. 

For each cohort, the script will clean the raw data and create a Quarto book for each cohort in html, word and pdf. 

This involves copying a specific `yml` file (`_quarto_{cohort name}.yml`) from the `quarto-yaml-template` folder to the project folder `harmonisation_template` and rename it as `_quarto.yml`, overwriting any existing `_quarto.yml` file. Using the `_quarto.yml` file. Quarto will then start running the Quarto scripts in the ``r fs::path("reports", "{cohort_name}_Cleaning")`` folder. This involves reading the raw data in the ``r fs::path("data-raw", "{cohort_name}")`` folder, placing preprocessing data in the ``r fs::path("reports", "{cohort_name}_Cleaning", "preprocessed_data")`` folder, outputting the harmonised data as excel file called `cleaned_{cohort_name}.xlsx` in the `reports` folder. Also, the data harmonisation process documentation will be created in the ``r fs::path("books", "{cohort_name}")`` folder as a Quarto book in html, word and pdf.

After data harmonisation, data combining for all cohorts, data filtering and preliminary analysis will be done by copying `_quarto_Prelim.yml` file from the `quarto-yaml-template` folder to the project folder `harmonisation_template` and rename it as `_quarto.yml`, overwriting any existing `_quarto.yml` file. Using the `_quarto.yml` file, Quarto runs the Quarto scripts in the ``r fs::path("reports", "Combine")`` folder. Results will be outputted as excel files called `harmonised.xlsx`, `harmonised_batch1.xlsx`, `harmonised_batch2.xlsx` in the `reports` folder. In addition, the preliminary results will be created in the ``r fs::path("books", "Prelim")`` folder as a Quarto book in html, word and pdf.

After doing this for each cohort, the script will then create a combined data harmonisation process documentation (for all the cohorts) as a Quarto book in html. The specific `yml` file (`_quarto_all.yml`) in the `quarto-yaml-template` folder will be used and the documentation will be created in the ``r fs::path("books", "all")`` folder. Data combining for all cohorts, data filtering and preliminary analysis will also be done by running Quarto scripts in the ``r fs::path("reports", "Combine")`` folder.

## General Recommendations

- Ensure the workspace is always in a blank state. Use [`usethis::use_blank_slate(scope = c("user", "project"))`](https://usethis.r-lib.org/reference/use_blank_slate.html) to create this setting.
- Keep the root of the project as clean as possible
- Store your raw data in `data-raw`
- Document raw data modifications. See `Flowchart.xlsx`.
- Export modified raw data in `reports/{cohort_name}_Cleaning/preprocessed_data`
- Store only **R functions** in `R/`
- Store only **R scripts** and/or **qmd** in `reports/{cohort_name}_Cleaning`
- Built relative paths using [`here::here()`](https://here.r-lib.org/reference/here.html)
- Call external functions as `{package_name}::{function()}`
- Use [`devtools::document()`](https://devtools.r-lib.org/reference/document.html) to update the `NAMESPACE`
- Use [`rcompendium::add_dependencies`](https://frbcesab.github.io/rcompendium/reference/add_dependencies.html) to update the list of required dependencies in `DESCRIPTION`
- Do not source your functions but use instead [`devtools::load_all()`](https://devtools.r-lib.org/reference/load_all.html). [`devtools::load_all()`](https://devtools.r-lib.org/reference/load_all.html) will load required dependencies listed in `DESCRIPTION` and R functions stored in `R/`
