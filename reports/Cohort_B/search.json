[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Harmonisation Template for Cohort B",
    "section": "",
    "text": "Preface\nHere is the documentation of the data harmonisation step generated using Quarto. To learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#file-structure",
    "href": "index.html#file-structure",
    "title": "Harmonisation Template for Cohort B",
    "section": "File Structure",
    "text": "File Structure\nHere is the file structure of the project used to generate the document.\nharmonisation/                            # Root of the project template.\n|\n├── .quarto/ (not in repository)          # Folder to keep intermediate files/folders \n|                                         # generated when Quarto renders the files.\n|\n├── archive/                              # Folder to keep previous books and harmonised data.\n|   |\n│   ├── reports/                          # Folder to keep previous versions of\n|   |   |                                 # data harmonisation documentation.\n|   |   |\n|   |   ├── {some_date}_batch/            # Folder to keep {some_date} version of\n|   |   |                                 # data harmonisation documentation.\n|   |   |\n|   |   └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|   |\n|   └── harmonised/                       # Folder to keep previous version of harmonised data.\n|       |\n|       ├── {some_date}_batch/            # Folder to keep {some_date} version of\n|       |                                 # harmonised data.\n|       |\n|       └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|\n├── codes/                                # Folder to keep R/Quarto scripts \n|   |                                     # to run data harmonisation.\n|   |\n│   ├── {cohort name}/                    # Folder to keep Quarto scripts to run\n|   |   |                                 # data cleaning, harmonisation \n|   |   |                                 # and output them for each cohort.\n|   |   |\n|   |   └── preprocessed_data/            # Folder to keep preprocessed data.\n|   |\n│   ├── harmonisation_summary/            # Folder to keep Quarto scripts to create\n|   |                                     # data harmonisation summary report.\n|   |\n│   ├── output/                           # Folder to keep harmonised data.\n|   |                                     \n|   ├── cohort_harmonisation_script.R     # R script to render each {cohort name}/ folder. \n|   |                                     # folder into html, pdf and word document.\n|   |\n|   └── harmonisation_summary_script.R    # R script to render the {harmonisation_summary}/ \n|                                         # folder into word document.\n│  \n├── data-raw/                             # Folder to keep cohort raw data (.csv, .xlsx, etc.)\n|   |\n│   ├── {cohort name}/                    # Folder to keep cohort raw data.\n|   |   |\n|   |   ├── {data_dictionary}             # Data dictionary file that correspond to the \n|   |   |                                 # cohort raw data. Can be one from the\n|   |   |                                 # collaborator provide or provided by us.\n|   |   |\n|   |   └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|   |\n|   ├── data-dictionary/                  # Folder to keep data dictionary \n|   |   |                                 # used for harmonising data.\n|   |   |\n|   |   └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|   |\n|   └── data-input/                       # Folder to keep data input file \n|       |                                 # for collaborators to fill in.\n|       |\n|       └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|  \n├── docs/                                 # Folder to keep R functions documentation \n|                                         # generated using pkgdown:::build_site_external().\n|  \n├── inst/                                 # Folder to keep arbitrary additional files \n|   |                                     # to include in the project.\n|   |  \n|   └── WORDLIST                          # File generated by spelling::update_wordlist()\n|  \n├── man/                                  # Folder to keep R functions documentation\n|   |                                     # generated using devtools::document().\n|   |\n│   ├── {fun-demo}.Rd                     # Documentation of the demo R function.\n|   |\n│   └── harmonisation-template.Rd         # High-level documentation.\n|  \n├── R/                                    # Folder to keep R functions.\n|   |\n│   ├── {fun-demo}.R                      # Script with R functions.\n|   |\n│   └── harmonisation-package.R           # Dummy R file for high-level documentation.\n│  \n├── renv/ (not in repository)             # Folder to keep all packages \n|                                         # installed in the renv environment.\n| \n├── reports/                              # Folder to keep the most recent data harmonisation\n|                                         # documentation.\n|\n├── templates/                            # Folder to keep template files needed to generate\n|   |                                     # data harmonisation documentation efficiently.\n|   |\n|   ├── quarto-yaml/                      # Folder to keep template files to generate \n|   |   |                                 # data harmonisation documentation structure \n|   |   |                                 # in Quarto. \n|   |   |\n│   |   ├── _quarto_{cohort name}.yml     # Quarto book template data harmonisation documentation \n|   |   |                                 # for {cohort name}.\n|   |   |\n|   |   └── _quarto_summary.yml           # Quarto book template data harmonisation summary.\n|   |\n|   └── index-qmd/                        # Folder to keep template files to generate\n|       |                                 # the preface page of the data harmonisation \n|       |                                 # documentation.\n|       |\n|       ├── _index_report.qmd             # Preface template for each cohort data harmonisation\n|       |                                 # report. \n|       |\n|       └── _index_summary.qmd            # Preface template for data harmonisation \n|                                         # summary report. \n|        \n├── tests/                                # Folder to keep test unit files. \n|                                         # Files will be used by R package testhat.\n|\n├── .Rbuildignore                         # List of files/folders to be ignored while \n│                                         # checking/installing the package.\n|\n├── .Renviron (not in repository)         # File to set environment variables.\n|\n├── .Rprofile (not in repository)         # R code to be run when R starts up.\n|                                         # It is run after the .Renviron file is sourced.\n|\n├── .Rhistory (not in repository)         # File containing R command history.\n|\n├── .gitignore                            # List of files/folders to be ignored while \n│                                         # using the git workflow.\n|\n├── .lintr                                # Configuration for linting\n|                                         # R projects and packages using linter.\n|        \n├── .renvignore                           # List of files/folders to be ignored when \n│                                         # renv is doing its snapshot.\n|\n├── DESCRIPTION[*]                        # Overall metadata of the project.\n|\n├── LICENSE                               # Content of the MIT license generated via\n|                                         # usethis::use_mit_license().\n|\n├── LICENSE.md                            # Content of the MIT license generated via\n|                                         # usethis::use_mit_license().\n|\n├── NAMESPACE                             # List of functions users can use or imported\n|                                         # from other R packages. It is generated \n|                                         # by devtools::document().\n│        \n├── README.md                             # GitHub README markdown file generated by Quarto.\n|\n├── README.qmd                            # GitHub README quarto file used to generate README.md. \n|        \n├── _pkgdown.yml                          # Configuration for R package documentation\n|                                         # using pkgdown:::build_site_external().\n|        \n├── _quarto.yml                           # Configuration for Quarto book generation.\n|                                         # It is also the project configuration file.\n|\n├── csl_file.csl                          # Citation Style Language (CSL) file to ensure\n|                                         # citations follows the Lancet journal.\n|        \n├── custom-reference.docx                 # Microsoft word template for data harmonisation \n|                                         # documentation to Word.\n|\n├── harmonisation_template.Rproj          # RStudio project file.\n|        \n├── index.qmd                             # Preface page of Quarto book content.\n|        \n├── references.bib                        # Bibtex file for Quarto book.\n|      \n└── renv.lock                             # Metadata of R packages installed generated\n                                          # using renv::snapshot().\n\n[*] These files are automatically created but user needs to manually add some information.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "codes/Cohort_B/00_R_Package_And_Environment.html",
    "href": "codes/Cohort_B/00_R_Package_And_Environment.html",
    "title": "1  R Package And Environment",
    "section": "",
    "text": "1 R Packages Used\nHere are the R packages used in this analysis.\nCode\nif (params$show_table && knitr::is_html_output()) {\n  harmonisation::get_r_package_info() |&gt;\n    reactable::reactable()\n}",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Package And Environment</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_B/00_R_Package_And_Environment.html#r-platform-information",
    "href": "codes/Cohort_B/00_R_Package_And_Environment.html#r-platform-information",
    "title": "1  R Package And Environment",
    "section": "2 R Platform Information",
    "text": "2 R Platform Information\nHere are the R platform environment used in this analysis.\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  r_platform_table &lt;- harmonisation::get_r_platform_info()\n  r_platform_table |&gt;\n    reactable::reactable(\n      defaultPageSize = 5\n    )\n}",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Package And Environment</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_B/00_R_Package_And_Environment.html#data-dictionary",
    "href": "codes/Cohort_B/00_R_Package_And_Environment.html#data-dictionary",
    "title": "1  R Package And Environment",
    "section": "3 Data dictionary",
    "text": "3 Data dictionary\nCheck to see if the data dictionary 20250310_data_dictionary.xlsx exists.\n\n\nCode\ndict_relative_path &lt;- fs::path(\n  \"data-raw\",\n  \"data_dictionary\",\n  params$data_dictionary\n)\n\n\ndict_path &lt;- here::here(dict_relative_path)\n\nif (!file.exists(dict_path)) {\n  stop(glue::glue(\"Input data dictionary {dict_path} cannot be found\"))\n}",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Package And Environment</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_B/01_Read_Cohort_B_Data.html",
    "href": "codes/Cohort_B/01_Read_Cohort_B_Data.html",
    "title": "2  Read Cohort B Data",
    "section": "",
    "text": "1 Read Data\nWe read the file data_to_harmonise_age_issue.csv using vroom::vroom\nCode\ncohort_B_data &lt;- vroom::vroom(\n  file = here::here(\"data-raw\",\n                    \"Cohort_B\",\n                    \"data_to_harmonise_age_issue.csv\"),\n  delim = \",\",\n  col_select = 1:2,\n  show_col_types = FALSE,\n  col_types = list(\n    ID = vroom::col_character(),\n    Age = vroom::col_integer()\n    )\n  ) |&gt;  \n  dplyr::rename(cohort_unique_id = \"ID\") |&gt;\n  # Remove rows when the ID value is NA\n  dplyr::filter(!is.na(.data[[\"cohort_unique_id\"]])) |&gt;\n  # Remove white spaces in column names\n  dplyr::rename_all(stringr::str_trim) |&gt; \n  # Check if cohort id is unique\n  pointblank::rows_distinct(\n    columns = \"cohort_unique_id\",\n  )\nTo safeguard a csv file with issues, we can use the function vroom::problems\nIf there are issues with the data, the output of vroom::problems will be a tibble.\nCode\ncohort_B_data |&gt; \n  vroom::problems()\n\n\n# A tibble: 3 × 5\n    row   col expected   actual  file                                           \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;                                          \n1     4     2 an integer missing D:/Jeremy/PortableR/RPortableWorkDirectory/har…\n2    10     2 an integer missing D:/Jeremy/PortableR/RPortableWorkDirectory/har…\n3    17     2 an integer missing D:/Jeremy/PortableR/RPortableWorkDirectory/har…\nTo check for this in an automatically, we can use pointblank::expect_row_count_match\nCode\ncohort_B_data |&gt; \n  vroom::problems() |&gt; \n  pointblank::expect_row_count_match(count = 0)\n\n\nError: Row counts for the two tables did not match.\nThe `expect_row_count_match()` validation failed beyond the absolute threshold level (1).\n* failure level (1) &gt;= failure threshold (1)\nSuppose we have a csv file with no issues, we can safeguard it with the following code.\nCode\ncohort_B_data &lt;- vroom::vroom(\n  file = here::here(\"data-raw\",\n                    \"Cohort_B\",\n                    \"data_to_harmonise.csv\"),\n  delim = \",\",\n  col_select = 1:8,\n  show_col_types = FALSE,\n  col_types = list(\n    ID = vroom::col_character(),\n    Age = vroom::col_integer(),\n    Sex = vroom::col_character(),\n    Height = vroom::col_double(),\n    Weight = vroom::col_double(),\n    `Smoke History` = vroom::col_character(),\n    `Chest Pain Character` = vroom::col_character(),\n    Dyspnea = vroom::col_character()\n    )\n  ) |&gt;  \n  dplyr::rename(cohort_unique_id = \"ID\") |&gt;\n  # Remove rows when the ID value is NA\n  dplyr::filter(!is.na(.data[[\"cohort_unique_id\"]])) |&gt;\n  # Remove white spaces in column names\n  dplyr::rename_all(stringr::str_trim) |&gt; \n  # Check if cohort id is unique\n  pointblank::rows_distinct(\n    columns = \"cohort_unique_id\",\n  )\n\ncohort_B_data |&gt; \n  vroom::problems() |&gt; \n  pointblank::expect_row_count_match(count = 0)",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Read Cohort B Data</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_B/01_Read_Cohort_B_Data.html#write-preprocessed-file",
    "href": "codes/Cohort_B/01_Read_Cohort_B_Data.html#write-preprocessed-file",
    "title": "2  Read Cohort B Data",
    "section": "2 Write Preprocessed File",
    "text": "2 Write Preprocessed File\nWe output data to be used for the next session.\n\n\nCode\ncohort_B_data |&gt;\n  fst::write_fst(\n    path = here::here(params$analysis_folder,\n                      params$harmonisation_folder,\n                      params$preprocessing_folder,\n                      \"01_Cohort_B_cleaned.fst\")\n)",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Read Cohort B Data</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_B/02_Extract_Demographic.html",
    "href": "codes/Cohort_B/02_Extract_Demographic.html",
    "title": "3  Extract Demographic",
    "section": "",
    "text": "1 Read Preprocessed File\nWe read output data from the previous section.",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extract Demographic</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_B/02_Extract_Demographic.html#demographics-and-behavioral-parameters",
    "href": "codes/Cohort_B/02_Extract_Demographic.html#demographics-and-behavioral-parameters",
    "title": "3  Extract Demographic",
    "section": "2 Demographics and Behavioral parameters",
    "text": "2 Demographics and Behavioral parameters\n\n2.1 Age and Sex\nage_years will be mapped from the column Age.\nsex is grouped as follows:\n\n\n\n\n\n\n\n\nSex\nsex\n\n\n\n\nFemale\n0\n\n\nMale\n1\n\n\n\n\n\n\nCode\nage_gender_data &lt;- cohort_B_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \n                  \"Age\", \n                  \"Sex\")) |&gt;\n  pointblank::col_vals_expr(\n    expr = ~ harmonisation::is_integer_vector(\n      cohort_A_data[[\"age\"]],\n      allow_na = TRUE)\n  ) |&gt;\n  dplyr::mutate(\n    # Convert age to type integer\n    age_years = as.integer(.data[[\"Age\"]]),\n    # Convert categorical columns to factors\n    sex = dplyr::case_when(\n      .data[[\"Sex\"]] == \"Female\" ~ \"0\",\n      .data[[\"Sex\"]] == \"Male\" ~ \"1\",\n      .default = NA_character_\n    ),\n    `Sex` = forcats::fct_relevel(\n      .data[[\"Sex\"]],\n      c(\"Female\", \"Male\")\n    ),\n    sex = forcats::fct_relevel(\n      .data[[\"sex\"]],\n      c(\"0\", \"1\")),\n  ) |&gt;\n  dplyr::relocate(\n    \"sex\",\n    .before = \"Sex\"\n  ) |&gt; \n  dplyr::relocate(\n    \"age_years\",\n    .after = \"Age\"\n  ) |&gt;\n  pointblank::col_vals_in_set(\n    columns = \"sex\",\n    set = c(\"0\", \"1\")\n  ) |&gt; \n  pointblank::col_vals_between(\n    columns = \"age_years\",\n    left = 0,\n    right = 100,\n    inclusive = c(FALSE, TRUE),\n    na_pass = TRUE\n  )\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  age_gender_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nage_gender_data &lt;- age_gender_data |&gt;\n  dplyr::select(-c(\"Age\", \"Sex\"))\n\n\n\n\n2.2 Height, Weight, BMI and BSA\nheight_cm will be mapped from the column Height. weight_kg will be mapped from the column Weight.\nbsa_m2 in m^2 will be calculated as sqrt([Height(cm) x Weight(kg)]/3600) bmi will be calculated as Weight(kg)/((Height(m))^2)\nAll values are then converted to two decimal places.\n\n\nCode\nbody_measurement_data &lt;- cohort_B_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \n                  \"Height\", \"Weight\")) |&gt;\n  dplyr::mutate(\n    height_cm = .data[[\"Height\"]],\n    weight_kg = .data[[\"Weight\"]],\n    bsa_m2 = sqrt((.data[[\"height_cm\"]] * .data[[\"weight_kg\"]]) / 3600),\n    bsa_m2 = harmonisation::round_to_nearest_digit(.data[[\"bsa_m2\"]], digits = 2),\n    bmi = .data[[\"weight_kg\"]] / ((.data[[\"height_cm\"]] / 100)^2),\n    bmi = harmonisation::round_to_nearest_digit(.data[[\"bmi\"]], digits = 2),\n    height_cm = harmonisation::round_to_nearest_digit(.data[[\"height_cm\"]], digits = 2),\n    weight_kg = harmonisation::round_to_nearest_digit(.data[[\"weight_kg\"]], digits = 2)\n  ) |&gt; \n  pointblank::col_vals_between(\n    columns = \"bmi\",\n    left = 10,\n    right = 50,\n    inclusive = c(TRUE, TRUE),\n    na_pass = TRUE\n  )  \n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  body_measurement_data |&gt;\n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nbody_measurement_data &lt;- body_measurement_data |&gt;\n  dplyr::select(-c(\"Height\", \"Weight\"))\n\n\n\n\n2.3 Smoking History\nsmoke_current is grouped as follows:\n\n\n\n\n\n\n\n\nSmoke History\nsmoke_current\n\n\n\n\nnon-smoker\n0\n\n\npast smoker\n0\n\n\ncurrent smoker\n1\n\n\n\n\nsmoke_past is grouped as follows:\n\n\n\n\n\n\n\n\nSmoke History\nsmoke_past\n\n\n\n\nnon-smoker\n0\n\n\npast smoker\n0\n\n\ncurrent smoker\n1\n\n\n\n\nWe do a check to ensure that we can only have these scenarios\n\nsmoke_current as 1 and smoke_past as 0 for current smokers\nsmoke_current as 0 and smoke_past as 1 for past smokers\nsmoke_current as 0 and smoke_past as 0 for non-smokers\nsmoke_current as -1 and smoke_past as -1 for unknown\n\n\n\nCode\nsmoking_data &lt;- cohort_B_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \n                  \"Smoke History\")) |&gt;\n  dplyr::mutate(\n    smoke_current = dplyr::case_when(\n      is.na(.data[[\"Smoke History\"]]) ~ \"-1\",\n      .data[[\"Smoke History\"]] == \"non-smoker\" ~ \"0\",\n      .data[[\"Smoke History\"]] == \"past smoker\" ~ \"0\",\n      .data[[\"Smoke History\"]] == \"current smoker\" ~ \"1\",\n      .default = NA_character_\n    ),\n    smoke_current = forcats::fct_relevel(\n      .data[[\"smoke_current\"]],\n      c(\"0\", \"1\")), \n    smoke_past = dplyr::case_when(\n      is.na(.data[[\"Smoke History\"]]) ~ \"-1\",\n      .data[[\"Smoke History\"]] == \"non-smoker\" ~ \"0\",\n      .data[[\"Smoke History\"]] == \"past smoker\" ~ \"1\",\n      .data[[\"Smoke History\"]] == \"current smoker\" ~ \"0\",\n      .default = NA_character_\n    ),\n    smoke_past = forcats::fct_relevel(\n      .data[[\"smoke_past\"]],\n      c(\"0\", \"1\")),\n    `Smoke History` = forcats::fct(\n      .data[[\"Smoke History\"]]\n    )\n  ) |&gt;\n  pointblank::col_vals_in_set(\n    columns = c(\"smoke_current\", \"smoke_past\"),\n    set = c(\"0\", \"1\", \"-1\")\n  ) |&gt; \n  pointblank::col_vals_expr(\n    expr = pointblank::expr(\n      (.data[[\"smoke_current\"]] == \"1\" & .data[[\"smoke_past\"]] == \"0\") |\n      (.data[[\"smoke_current\"]] == \"-1\" & .data[[\"smoke_past\"]] == -\"1\") |\n      (.data[[\"smoke_current\"]] == \"0\" & .data[[\"smoke_past\"]] %in% c(\"0\", \"1\"))\n    )\n  )\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  smoking_data |&gt;\n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nsmoking_data &lt;- smoking_data |&gt;\n  dplyr::select(-c(\"Smoke History\"))\n\n\n\n\n2.4 Chest Pain\n\n2.4.1 Shortness of Breath\nhave_sob is grouped as follows:\n\n\n\n\n\n\n\n\nDyspnea\nhave_sob\n\n\n\n\nno\n0\n\n\nyes\n1\n\n\n\n\n\n\nCode\nshortness_of_breath_data &lt;- cohort_B_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \"Dyspnea\")) |&gt;\n  dplyr::mutate(\n    have_sob = dplyr::case_when(\n      .data[[\"Dyspnea\"]] == \"no\" ~ \"0\",\n      .data[[\"Dyspnea\"]] == \"yes\" ~ \"1\",\n      .default = NA_character_\n    ),\n    have_sob = forcats::fct_relevel(\n      as.character(.data[[\"have_sob\"]]),\n      c(\"0\", \"1\")),\n    Dyspnea = forcats::fct_relevel(\n      as.character(.data[[\"Dyspnea\"]]),\n      c(\"no\", \"yes\")),    \n  ) |&gt;\n  pointblank::col_vals_in_set(\n    columns = c(\"have_sob\"),\n    set = c(\"0\", \"1\", \"-1\")\n  ) \n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  shortness_of_breath_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nshortness_of_breath_data &lt;- shortness_of_breath_data |&gt;\n  dplyr::select(-c(\"Dyspnea\"))\n\n\n\n\n2.4.2 Have chest pain or not\nhave_chest_pain is grouped as follows:\n\n\n\n\n\n\n\n\nChest Pain Character\nhave_chest_pain\n\n\n\n\nno chest pain\n0\n\n\ntypical, atypical or nonanginal\n1\n\n\n\n\n\n\nCode\nhave_chest_pain_data &lt;- cohort_B_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \"Chest Pain Character\")) |&gt;\n  dplyr::mutate(\n    have_chest_pain = dplyr::case_when(\n      .data[[\"Chest Pain Character\"]] %in% c(\"no chest pain\") ~ \"0\",\n      .data[[\"Chest Pain Character\"]] %in% c(\"typical\", \"atypical\", \"nonanginal\") ~ \"1\",\n      .default = NA_character_\n    ),\n    have_chest_pain = forcats::fct_relevel(\n      .data[[\"have_chest_pain\"]],\n      c(\"0\", \"1\")\n    ),\n    `Chest Pain Character` = forcats::fct_relevel(\n      as.character(.data[[\"Chest Pain Character\"]]),\n      c(\"no chest pain\", \"typical\", \"atypical\", \"nonanginal\")\n    )\n  ) |&gt;\n  pointblank::col_vals_in_set(\n    columns = c(\"have_chest_pain\"),\n    set = c(\"0\", \"1\")\n  )  \n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  have_chest_pain_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nhave_chest_pain_data &lt;- have_chest_pain_data |&gt;\n  dplyr::select(-c(\"Chest Pain Character\"))\n\n\n\n\n2.4.3 Symptomatic or Asymptomatic\nsymptoms is grouped as follows:\n\n\n\n\n\n\n\n\n\nhave_sob\nhave_chest_pain\nsymptoms\n\n\n\n\n-1\n-1\n-1\n\n\n0\n0\n0\n\n\n0 or 1\n1\n1\n\n\n1\n0\n2\n\n\n\n\n\n\nCode\nsymptoms_data &lt;- cohort_B_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\")) |&gt;\n  dplyr::left_join(shortness_of_breath_data, \n                   by = dplyr::join_by(\"cohort_unique_id\"),\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::left_join(have_chest_pain_data, \n                   by = dplyr::join_by(\"cohort_unique_id\"),\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;                   \n  dplyr::mutate(\n    symptoms = dplyr::case_when(\n      (.data[[\"have_chest_pain\"]] == \"-1\" &\n       .data[[\"have_sob\"]] == \"-1\"\n      ) ~ \"-1\",\n      (.data[[\"have_chest_pain\"]] == \"0\" &\n       .data[[\"have_sob\"]] == \"0\" \n      ) ~ \"0\",        \n      (.data[[\"have_chest_pain\"]] == \"1\" &\n       .data[[\"have_sob\"]] %in% c(\"0\", \"1\")\n      ) ~ \"1\", \n      (.data[[\"have_chest_pain\"]] == \"0\" &\n       .data[[\"have_sob\"]] == \"1\" \n      ) ~ \"2\",  \n      .default = NA_character_\n    ),\n    symptoms = forcats::fct_relevel(\n      .data[[\"symptoms\"]],\n      c(\"0\", \"1\", \"2\"))\n  ) |&gt; \n  pointblank::col_vals_in_set(\n    columns = c(\"symptoms\"),\n    set = c(\"0\", \"1\", \"2\")\n  )\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  symptoms_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nsymptoms_data &lt;- symptoms_data |&gt;\n  dplyr::select(-c(\"have_chest_pain\", \"have_sob\"))\n\n\n\n\n2.4.4 Chest Pain Type\nchest_pain_type is grouped as follows:\n\n\n\n\n\n\n\n\n\nDyspnea\nChest Pain Character\nchest_pain_type\n\n\n\n\nno\nno chest pain\n0\n\n\nno or yes\ntypical\n1\n\n\nno or yes\natypical\n2\n\n\nno or yes\nnonanginal\n3\n\n\nyes\nno chest pain\n4\n\n\n\n\n\n\nCode\nchest_pain_type_data &lt;- cohort_B_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \"Chest Pain Character\", \"Dyspnea\")) |&gt;\n  dplyr::mutate(\n    chest_pain_type = dplyr::case_when(\n      (.data[[\"Chest Pain Character\"]] == \"no chest pain\" &\n       .data[[\"Dyspnea\"]] == \"no\" \n      ) ~ \"0\",        \n      (.data[[\"Chest Pain Character\"]] == \"typical\" &\n       .data[[\"Dyspnea\"]] %in% c(\"no\", \"yes\")\n      ) ~ \"1\",\n      (.data[[\"Chest Pain Character\"]] == \"atypical\" &\n       .data[[\"Dyspnea\"]] %in% c(\"no\", \"yes\")\n      ) ~ \"2\", \n      (.data[[\"Chest Pain Character\"]] == \"nonanginal\" &\n       .data[[\"Dyspnea\"]] %in% c(\"no\", \"yes\")\n      ) ~ \"3\", \n      (.data[[\"Chest Pain Character\"]] == \"no chest pain\" &\n       .data[[\"Dyspnea\"]] == \"yes\" \n      ) ~ \"4\",  \n      .default = NA_character_\n    ),\n    `Chest Pain Character` = forcats::fct_relevel(\n      as.character(.data[[\"Chest Pain Character\"]]),\n      c(\"no chest pain\", \"typical\", \"atypical\", \"nonanginal\")\n    ),\n    `Dyspnea` = forcats::fct_relevel(\n      as.character(.data[[\"Dyspnea\"]]),\n      c(\"no\", \"yes\")\n    ),\n    chest_pain_type = forcats::fct_relevel(\n      .data[[\"chest_pain_type\"]],\n      c(\"0\", \"1\", \"2\", \"3\"))\n  ) |&gt; \n  dplyr::relocate(\n    \"Chest Pain Character\",\n    .after = \"cohort_unique_id\"\n  ) |&gt; \n  pointblank::col_vals_in_set(\n    columns = c(\"chest_pain_type\"),\n    set = c(\"0\", \"1\", \"2\", \"3\", \"4\")\n  )\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  chest_pain_type_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nchest_pain_type_data &lt;- chest_pain_type_data |&gt;\n  dplyr::select(-c(\"Dyspnea\", \"Chest Pain Character\"))\n\n\n\n\n2.4.5 Combined chest pain related tables\nWe combine all chest related tables together\n\n\nCode\njoin_specification &lt;- dplyr::join_by(\"cohort_unique_id\")\n\nchest_pain_data &lt;- cohort_B_data |&gt; \n  dplyr::select(c(\"cohort_unique_id\")) |&gt; \n  dplyr::left_join(have_chest_pain_data, \n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::left_join(chest_pain_type_data, \n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::left_join(shortness_of_breath_data, \n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::left_join(symptoms_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\")\n\ntestthat::expect_true(\n  pointblank::has_columns(\n    chest_pain_data,\n    columns = c(\"have_sob\", \"have_chest_pain\", \"symptoms\", \"chest_pain_type\")\n  )\n) \n\ntestthat::expect_equal(\n  ncol(chest_pain_data), 5\n) \n\n\n\n\n\n2.5 Combine Demographics\nWe combine all the data to give the demo_behave_data.\n\n\nCode\njoin_specification &lt;- dplyr::join_by(\"cohort_unique_id\")\n\ndemo_behave_data &lt;- cohort_B_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\")) |&gt;\n  dplyr::left_join(age_gender_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;\n  dplyr::left_join(body_measurement_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;\n  dplyr::left_join(smoking_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;\n  dplyr::left_join(chest_pain_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;\n  dplyr::relocate(c(\"bsa_m2\", \"bmi\"),\n                  .after = \"sex\")\n\n\ntestthat::expect_true(\n  pointblank::has_columns(\n    demo_behave_data,\n    columns = c(\n      \"age_years\", \"sex\",\n      \"height_cm\", \"weight_kg\", \"bsa_m2\", \"bmi\",\n      \"smoke_current\", \"smoke_past\",\n      \"have_sob\", \"have_chest_pain\",\n      \"symptoms\", \"chest_pain_type\"\n    )\n  )\n) \n\ntestthat::expect_equal(\n  ncol(demo_behave_data), 13\n)",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extract Demographic</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_B/02_Extract_Demographic.html#write-preprocessed-file",
    "href": "codes/Cohort_B/02_Extract_Demographic.html#write-preprocessed-file",
    "title": "3  Extract Demographic",
    "section": "3 Write Preprocessed File",
    "text": "3 Write Preprocessed File\nWe output data to be used for the next session.\n\n\nCode\ndemo_behave_data |&gt;\n  fst::write_fst(\n    path = here::here(\n      params$analysis_folder,\n      params$harmonisation_folder,\n      params$preprocessing_folder,\n      \"02_demographic_data.fst\"),\n)",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extract Demographic</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_B/03_Export_To_Excel.html",
    "href": "codes/Cohort_B/03_Export_To_Excel.html",
    "title": "4  Export To Excel",
    "section": "",
    "text": "1 Read all tabular data\nWe read all tabular data from the previous section.",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Export To Excel</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_B/03_Export_To_Excel.html#export-data-as-excel",
    "href": "codes/Cohort_B/03_Export_To_Excel.html#export-data-as-excel",
    "title": "4  Export To Excel",
    "section": "2 Export Data as Excel",
    "text": "2 Export Data as Excel\nWe export the standardised data to an excel file called harmonised_Cohort_B.xlsx\n\n\nCode\n# Create a new workbook\nmy_workbook &lt;- openxlsx::createWorkbook()\n\nsheet_name = c(\"demographics\")\n\noutput_data = list(demo_behave_data)  |&gt; \n  purrr::map(\n    .f = harmonisation::add_cohort_name,\n    cohort_name = params$cohort_name,\n    cohort_name_column = \"cohort_name\"\n  )\n\npurrr::walk2(\n    .x = sheet_name,\n    .y = output_data,\n    .f = harmonisation::write_to_sheet,\n    workbook = my_workbook\n)\n\n# Save workbook\nopenxlsx::saveWorkbook(\n  wb = my_workbook, \n  file = here::here(params$analysis_folder,\n                    params$output_folder,\n                    params$cleaned_folder,\n                    params$output_excel_file),\n  overwrite = TRUE\n)",
    "crumbs": [
      "Cohort B Cleaning",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Export To Excel</span>"
    ]
  }
]