[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Harmonisation Template for Cohort A",
    "section": "",
    "text": "Preface\nHere is the documentation of the data harmonisation step generated using Quarto. To learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#file-structure",
    "href": "index.html#file-structure",
    "title": "Harmonisation Template for Cohort A",
    "section": "File Structure",
    "text": "File Structure\nHere is the file structure of the project used to generate the document.\nharmonisation/                            # Root of the project template.\n|\n├── .quarto/ (not in repository)          # Folder to keep intermediate files/folders \n|                                         # generated when Quarto renders the files.\n|\n├── archive/                              # Folder to keep previous books and harmonised data.\n|   |\n│   ├── reports/                          # Folder to keep previous versions of\n|   |   |                                 # data harmonisation documentation.\n|   |   |\n|   |   ├── {some_date}_batch/            # Folder to keep {some_date} version of\n|   |   |                                 # data harmonisation documentation.\n|   |   |\n|   |   └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|   |\n|   └── harmonised/                       # Folder to keep previous version of harmonised data.\n|       |\n|       ├── {some_date}_batch/            # Folder to keep {some_date} version of\n|       |                                 # harmonised data.\n|       |\n|       └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|\n├── codes/                                # Folder to keep R/Quarto scripts \n|   |                                     # to run data harmonisation.\n|   |\n│   ├── {cohort name}/                    # Folder to keep Quarto scripts to run\n|   |   |                                 # data cleaning, harmonisation \n|   |   |                                 # and output them for each cohort.\n|   |   |\n|   |   └── preprocessed_data/            # Folder to keep preprocessed data.\n|   |\n│   ├── harmonisation_summary/            # Folder to keep Quarto scripts to create\n|   |                                     # data harmonisation summary report.\n|   |\n│   ├── output/                           # Folder to keep harmonised data.\n|   |                                     \n|   ├── cohort_harmonisation_script.R     # R script to render each {cohort name}/ folder. \n|   |                                     # folder into html, pdf and word document.\n|   |\n|   └── harmonisation_summary_script.R    # R script to render the {harmonisation_summary}/ \n|                                         # folder into word document.\n│  \n├── data-raw/                             # Folder to keep cohort raw data (.csv, .xlsx, etc.)\n|   |\n│   ├── {cohort name}/                    # Folder to keep cohort raw data.\n|   |   |\n|   |   ├── {data_dictionary}             # Data dictionary file that correspond to the \n|   |   |                                 # cohort raw data. Can be one from the\n|   |   |                                 # collaborator provide or provided by us.\n|   |   |\n|   |   └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|   |\n|   ├── data-dictionary/                  # Folder to keep data dictionary \n|   |   |                                 # used for harmonising data.\n|   |   |\n|   |   └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|   |\n|   └── data-input/                       # Folder to keep data input file \n|       |                                 # for collaborators to fill in.\n|       |\n|       └── Flowchart.xlsx                # Flowchart sheet to record version control.\n|  \n├── docs/                                 # Folder to keep R functions documentation \n|                                         # generated using pkgdown:::build_site_external().\n|  \n├── inst/                                 # Folder to keep arbitrary additional files \n|   |                                     # to include in the project.\n|   |  \n|   └── WORDLIST                          # File generated by spelling::update_wordlist()\n|  \n├── man/                                  # Folder to keep R functions documentation\n|   |                                     # generated using devtools::document().\n|   |\n│   ├── {fun-demo}.Rd                     # Documentation of the demo R function.\n|   |\n│   └── harmonisation-template.Rd         # High-level documentation.\n|  \n├── R/                                    # Folder to keep R functions.\n|   |\n│   ├── {fun-demo}.R                      # Script with R functions.\n|   |\n│   └── harmonisation-package.R           # Dummy R file for high-level documentation.\n│  \n├── renv/ (not in repository)             # Folder to keep all packages \n|                                         # installed in the renv environment.\n| \n├── reports/                              # Folder to keep the most recent data harmonisation\n|                                         # documentation.\n|\n├── templates/                            # Folder to keep template files needed to generate\n|   |                                     # data harmonisation documentation efficiently.\n|   |\n|   ├── quarto-yaml/                      # Folder to keep template files to generate \n|   |   |                                 # data harmonisation documentation structure \n|   |   |                                 # in Quarto. \n|   |   |\n│   |   ├── _quarto_{cohort name}.yml     # Quarto book template data harmonisation documentation \n|   |   |                                 # for {cohort name}.\n|   |   |\n|   |   └── _quarto_summary.yml           # Quarto book template data harmonisation summary.\n|   |\n|   └── index-qmd/                        # Folder to keep template files to generate\n|       |                                 # the preface page of the data harmonisation \n|       |                                 # documentation.\n|       |\n|       ├── _index_report.qmd             # Preface template for each cohort data harmonisation\n|       |                                 # report. \n|       |\n|       └── _index_summary.qmd            # Preface template for data harmonisation \n|                                         # summary report. \n|        \n├── tests/                                # Folder to keep test unit files. \n|                                         # Files will be used by R package testhat.\n|\n├── .Rbuildignore                         # List of files/folders to be ignored while \n│                                         # checking/installing the package.\n|\n├── .Renviron (not in repository)         # File to set environment variables.\n|\n├── .Rprofile (not in repository)         # R code to be run when R starts up.\n|                                         # It is run after the .Renviron file is sourced.\n|\n├── .Rhistory (not in repository)         # File containing R command history.\n|\n├── .gitignore                            # List of files/folders to be ignored while \n│                                         # using the git workflow.\n|\n├── .lintr                                # Configuration for linting\n|                                         # R projects and packages using linter.\n|        \n├── .renvignore                           # List of files/folders to be ignored when \n│                                         # renv is doing its snapshot.\n|\n├── DESCRIPTION[*]                        # Overall metadata of the project.\n|\n├── LICENSE                               # Content of the MIT license generated via\n|                                         # usethis::use_mit_license().\n|\n├── LICENSE.md                            # Content of the MIT license generated via\n|                                         # usethis::use_mit_license().\n|\n├── NAMESPACE                             # List of functions users can use or imported\n|                                         # from other R packages. It is generated \n|                                         # by devtools::document().\n│        \n├── README.md                             # GitHub README markdown file generated by Quarto.\n|\n├── README.qmd                            # GitHub README quarto file used to generate README.md. \n|        \n├── _pkgdown.yml                          # Configuration for R package documentation\n|                                         # using pkgdown:::build_site_external().\n|        \n├── _quarto.yml                           # Configuration for Quarto book generation.\n|                                         # It is also the project configuration file.\n|\n├── csl_file.csl                          # Citation Style Language (CSL) file to ensure\n|                                         # citations follows the Lancet journal.\n|        \n├── custom-reference.docx                 # Microsoft word template for data harmonisation \n|                                         # documentation to Word.\n|\n├── harmonisation_template.Rproj          # RStudio project file.\n|        \n├── index.qmd                             # Preface page of Quarto book content.\n|        \n├── references.bib                        # Bibtex file for Quarto book.\n|      \n└── renv.lock                             # Metadata of R packages installed generated\n                                          # using renv::snapshot().\n\n[*] These files are automatically created but user needs to manually add some information.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "codes/Cohort_A/00_R_Package_And_Environment.html",
    "href": "codes/Cohort_A/00_R_Package_And_Environment.html",
    "title": "1  R Package And Environment",
    "section": "",
    "text": "1 R Packages Used\nHere are the R packages used in this analysis.\nCode\nif (params$show_table && knitr::is_html_output()) {\n  harmonisation::get_r_package_info() |&gt;\n    reactable::reactable()\n}",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Package And Environment</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/00_R_Package_And_Environment.html#r-platform-information",
    "href": "codes/Cohort_A/00_R_Package_And_Environment.html#r-platform-information",
    "title": "1  R Package And Environment",
    "section": "2 R Platform Information",
    "text": "2 R Platform Information\nHere are the R platform environment used in this analysis.\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  r_platform_table &lt;- harmonisation::get_r_platform_info()\n  r_platform_table |&gt;\n    reactable::reactable(\n      defaultPageSize = 5\n    )\n}",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Package And Environment</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/00_R_Package_And_Environment.html#data-dictionary",
    "href": "codes/Cohort_A/00_R_Package_And_Environment.html#data-dictionary",
    "title": "1  R Package And Environment",
    "section": "3 Data dictionary",
    "text": "3 Data dictionary\nCheck to see if the data dictionary 20250310_data_dictionary.xlsx exists.\n\n\nCode\ndict_relative_path &lt;- fs::path(\n  \"data-raw\",\n  \"data_dictionary\",\n  params$data_dictionary\n)\n\n\ndict_path &lt;- here::here(dict_relative_path)\n\nif (!file.exists(dict_path)) {\n  stop(glue::glue(\"Input data dictionary {dict_path} cannot be found\"))\n}",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Package And Environment</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/01_Read_Cohort_A_Data.html",
    "href": "codes/Cohort_A/01_Read_Cohort_A_Data.html",
    "title": "2  Read Cohort A Data",
    "section": "",
    "text": "1 Read Data\nWe read the data and have the following warnings\nCode\ncohort_A_data &lt;- readxl::read_excel(\n  path = here::here(\"data-raw\",\n                    \"Cohort_A\",\n                    \"data_to_harmonise_age_issue.xlsx\"),\n  sheet = \"Sheet1\",\n  col_types = c(\n    \"text\", \"numeric\"\n    )\n  )\nThis warning occurs because we expect the second column Age to be numeric but there exists some text columns.\nSuppose we ask the collaborator to fix the age column and the collaborator returns a new file. To ensure that there are no messages, we can use testthat::expect_no_condition.\nHere is an example when it gives an error with the old file\nCode\ntestthat::expect_no_condition(\n  readxl::read_excel(\n  path = here::here(\"data-raw\",\n                    \"Cohort_A\",\n                    \"data_to_harmonise_age_issue.xlsx\"),\n  sheet = \"Sheet1\",\n  col_types = c(\n    \"text\", \"numeric\"\n    )\n  )\n)\n\n\nError: Expected `readxl::read_excel(...)` to run without any conditions.\nℹ Actually got a &lt;simpleWarning&gt; with text:\n  Expecting numeric in B7 / R7C2: got 'missing'\nWe can read the new file in the following way. However, this method means that you will need to read the file twice.\nCode\ntestthat::expect_no_condition(\n  readxl::read_excel(\n  path = here::here(\"data-raw\",\n                    \"Cohort_A\",\n                    \"data_to_harmonise_age_issue_fixed.xlsx\"),\n  sheet = \"Sheet1\",\n  col_types = c(\n    \"text\", \"numeric\"\n    )\n  )\n)\n\ncohort_A_data &lt;- readxl::read_excel(\n  path = here::here(\"data-raw\",\n                    \"Cohort_A\",\n                    \"data_to_harmonise_age_issue_fixed.xlsx\"),\n  sheet = \"Sheet1\",\n  col_types = c(\n    \"text\", \"numeric\"\n    )\n  )\nTo read the file only once, we can use the tee pipe operator %T&gt;%.\nCode\ncohort_A_data &lt;- readxl::read_excel(\n  path = here::here(\"data-raw\",\n                    \"Cohort_A\",\n                    \"data_to_harmonise_age_issue_fixed.xlsx\"),\n  sheet = \"Sheet1\",\n  col_types = c(\n    \"text\", \"numeric\"\n    )\n  ) %T&gt;%\n  testthat::expect_no_condition()",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Read Cohort A Data</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/01_Read_Cohort_A_Data.html#check-for-unique-patient-id",
    "href": "codes/Cohort_A/01_Read_Cohort_A_Data.html#check-for-unique-patient-id",
    "title": "2  Read Cohort A Data",
    "section": "2 Check for unique patient id",
    "text": "2 Check for unique patient id\nWe can use pointblank::rows_distinct to check if the column Serial Number has unique values.\n\n\nCode\ncohort_A_data &lt;- readxl::read_excel(\n  path = here::here(\"data-raw\",\n                    \"Cohort_A\",\n                    \"data_to_harmonise_age_issue_fixed.xlsx\"),\n  sheet = \"Sheet1\",\n  col_types = c(\n    \"text\", \"numeric\"\n    )\n  ) %T&gt;%\n  testthat::expect_no_condition() |&gt; \n  dplyr::rename(cohort_unique_id = \"Serial Number\") |&gt; \n  # Remove rows when the ID value is NA\n  dplyr::filter(!is.na(.data[[\"cohort_unique_id\"]])) |&gt;\n  dplyr::mutate(\n    cohort_unique_id = as.character(cohort_unique_id)\n  ) |&gt; \n  # Remove white spaces in column names\n  dplyr::rename_all(stringr::str_trim) |&gt; \n  # Check if cohort id is unique\n  pointblank::rows_distinct(\n    columns = \"cohort_unique_id\",\n  )",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Read Cohort A Data</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/01_Read_Cohort_A_Data.html#clean-weight-columns",
    "href": "codes/Cohort_A/01_Read_Cohort_A_Data.html#clean-weight-columns",
    "title": "2  Read Cohort A Data",
    "section": "3 Clean Weight columns",
    "text": "3 Clean Weight columns\nSometimes the collaborator will not give you a new file and will only respond with an email acknowledging that it is an error.\nYou will need to edit the values yourself. It is best not to edit the file as you may forget to make the manual change if the collaborator gives you a new version a few months later with the same error.\nIt is also advised to record such changes before data harmonisation.\nWe read the data with the some issues with the weight.\n\n\nCode\ncohort_A_data &lt;- readxl::read_excel(\n  path = here::here(\"data-raw\",\n                    \"Cohort_A\",\n                    \"data_to_harmonise.xlsx\"),\n  sheet = \"Sheet1\",\n  col_types = c(\n    \"text\", # unique id\n    \"numeric\", \"text\", # age and sex\n    \"numeric\", \"numeric\", # height and weight\n    \"numeric\", \"numeric\", \"numeric\", \"numeric\", # smoking history\n    \"numeric\", \"numeric\" # symptoms\n    )\n  ) %T&gt;%\n  testthat::expect_no_condition() |&gt; \n  dplyr::rename(cohort_unique_id = \"Serial Number\") |&gt; \n  # Remove rows when the ID value is NA\n  dplyr::filter(!is.na(.data[[\"cohort_unique_id\"]])) |&gt;\n  dplyr::mutate(\n    cohort_unique_id = as.character(cohort_unique_id)\n  ) |&gt; \n  # Remove white spaces in column names\n  dplyr::rename_all(stringr::str_trim) |&gt; \n  # Check if cohort id is unique\n  pointblank::rows_distinct(\n    columns = \"cohort_unique_id\",\n  )",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Read Cohort A Data</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/01_Read_Cohort_A_Data.html#update-weight",
    "href": "codes/Cohort_A/01_Read_Cohort_A_Data.html#update-weight",
    "title": "2  Read Cohort A Data",
    "section": "4 Update Weight",
    "text": "4 Update Weight\nHere are the following patient’s height that needs to be updated.\n\nA018 has a weight of 215.4kg. Value is changed to 90 kg.\n\n\n\nCode\nweight_data &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \"weight\")) |&gt;\n  # Check if these patient IDs are present\n  pointblank::col_vals_make_subset(\n    columns = c(\"cohort_unique_id\"),\n    set = c(\"A018\")\n  ) |&gt; \n  dplyr::mutate(\n    updated_weight = dplyr::case_when(\n      .data[[\"cohort_unique_id\"]] == \"A018\" & .data[[\"weight\"]] == 215.4 ~ 90.1,\n      .default = .data[[\"weight\"]]\n    ),\n  )\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  weight_data |&gt; \n    dplyr::filter(\n      .data[[\"cohort_unique_id\"]] %in% \n        c(\"A018\")\n    ) |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nweight_data &lt;- weight_data |&gt;\n  dplyr::select(-c(\"weight\"))",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Read Cohort A Data</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/01_Read_Cohort_A_Data.html#merge-updated-weight",
    "href": "codes/Cohort_A/01_Read_Cohort_A_Data.html#merge-updated-weight",
    "title": "2  Read Cohort A Data",
    "section": "5 Merge updated weight",
    "text": "5 Merge updated weight\n\n\nCode\njoin_specification &lt;- dplyr::join_by(\"cohort_unique_id\")\n\ncohort_A_data &lt;- cohort_A_data |&gt;\n  dplyr::inner_join(weight_data, \n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::mutate(\n    `weight` = .data[[\"updated_weight\"]]\n  ) |&gt; \n  dplyr::select(-c(\"updated_weight\"))",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Read Cohort A Data</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/01_Read_Cohort_A_Data.html#check-corrections",
    "href": "codes/Cohort_A/01_Read_Cohort_A_Data.html#check-corrections",
    "title": "2  Read Cohort A Data",
    "section": "6 Check corrections",
    "text": "6 Check corrections\nWe check if the corrections are made based on the collaborator request. Changes are made manually on the excel file as the collaborator is no longer providing newer version of the data.\n\nweight changed from 215.4kg to 90.1kg for patient A018\n\n\n\nCode\ncohort_A_data |&gt; \n  # Check if these patient IDs are present\n  pointblank::expect_col_vals_make_subset(\n    columns = c(\"cohort_unique_id\"),\n    set = c(\"A018\")\n  ) |&gt; \n  pointblank::expect_col_vals_expr(  \n    expr = pointblank::expr( \n      dplyr::case_when(\n        .data[[\"cohort_unique_id\"]] %in% \"A018\" ~ \n          isTRUE(all.equal(\n            target = 90.1,\n            current = cohort_A_data[[\"weight\"]][which(cohort_A_data[[\"cohort_unique_id\"]] == \"A018\")],\n            tolerance = 0.0001)\n          ))\n    )\n  )",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Read Cohort A Data</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/01_Read_Cohort_A_Data.html#write-preprocessed-file",
    "href": "codes/Cohort_A/01_Read_Cohort_A_Data.html#write-preprocessed-file",
    "title": "2  Read Cohort A Data",
    "section": "7 Write Preprocessed File",
    "text": "7 Write Preprocessed File\nWe output data to be used for the next session.\n\n\nCode\ncohort_A_data |&gt;\n  fst::write_fst(\n    path = here::here(params$analysis_folder,\n                      params$harmonisation_folder,\n                      params$preprocessing_folder,\n                      \"01_Cohort_A_cleaned.fst\")\n)",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Read Cohort A Data</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/02_Extract_Demographic.html",
    "href": "codes/Cohort_A/02_Extract_Demographic.html",
    "title": "3  Extract Demographic",
    "section": "",
    "text": "1 Read Preprocessed File\nWe read output data from the previous section.",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extract Demographic</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/02_Extract_Demographic.html#check-for-integer-vector",
    "href": "codes/Cohort_A/02_Extract_Demographic.html#check-for-integer-vector",
    "title": "3  Extract Demographic",
    "section": "2 Check for integer vector",
    "text": "2 Check for integer vector\nWe have a function that checks if the numeric vector has integers.\n\n\nCode\nnon_integer_data &lt;- data.frame(\n  non_integer_col = c(-1, 0, NA, 2.0000,\n                      3.010, pi, exp(1)\n                     )\n)\n\nnon_integer_data |&gt;\n  pointblank::col_vals_expr(\n    expr = ~ harmonisation::is_integer_vector(\n      input_vector = non_integer_data[[\"non_integer_col\"]],\n      allow_na = TRUE)\n  )\n\n\nError: The `col_vals_expr()` validation failed beyond the absolute threshold level (1).\n* failure level (3) &gt;= failure threshold (1)",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extract Demographic</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/02_Extract_Demographic.html#demographics-and-behavioral-parameters",
    "href": "codes/Cohort_A/02_Extract_Demographic.html#demographics-and-behavioral-parameters",
    "title": "3  Extract Demographic",
    "section": "3 Demographics and Behavioral parameters",
    "text": "3 Demographics and Behavioral parameters\n\n3.1 Age and Sex\nage_years will be mapped from the column age. age value of 0 is set as missing.\nsex is grouped as follows:\n\n\n\n\n\n\n\n\nsex before\nsex\n\n\n\n\nF\n0\n\n\nM\n1\n\n\n\n\n\n\nCode\nage_gender_data &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \n                  \"age\", \n                  \"sex\")) |&gt;\n  pointblank::col_vals_expr(\n    expr = ~ harmonisation::is_integer_vector(\n      cohort_A_data[[\"age\"]],\n      allow_na = TRUE)\n  ) |&gt;\n  dplyr::mutate(\n    # Convert age to type integer\n    age_years = as.integer(.data[[\"age\"]]),\n    # Convert age of 0 to NA\n    age_years = dplyr::case_when(\n      .data[[\"age_years\"]] == 0 ~ NA_integer_,\n      .default = .data[[\"age_years\"]]\n    ),\n    sex_before = .data[[\"sex\"]],\n    # Convert categorical columns to factors\n    sex = dplyr::case_when(\n      .data[[\"sex_before\"]] == \"F\" ~ \"0\",\n      .data[[\"sex_before\"]] == \"M\" ~ \"1\",\n      .default = as.character(.data[[\"sex_before\"]])\n    ),\n    `sex_before` = forcats::fct_relevel(\n      .data[[\"sex_before\"]],\n      c(\"F\", \"M\")\n    ),\n    sex = forcats::fct_relevel(\n      .data[[\"sex\"]],\n      c(\"0\", \"1\")),\n  ) |&gt;\n  dplyr::relocate(\n    \"sex\",\n    .before = \"sex_before\"\n  ) |&gt; \n  pointblank::col_vals_in_set(\n    columns = \"sex\",\n    set = c(\"0\", \"1\")\n  ) |&gt; \n  pointblank::col_vals_between(\n    columns = \"age_years\",\n    left = 0,\n    right = 100,\n    inclusive = c(FALSE, TRUE),\n    na_pass = TRUE\n  )\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  age_gender_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nage_gender_data &lt;- age_gender_data |&gt;\n  dplyr::select(-c(\"age\", \"sex_before\"))\n\n\n\n\n3.2 Height, Weight, BMI and BSA\nheight_cm will be mapped from the column height. weight_kg will be mapped from the column weight.\nbsa_m2 in m^2 will be calculated as sqrt([Height(cm) x Weight(kg)]/3600) bmi will be calculated as Weight(kg)/((Height(m))^2)\nAll values are then converted to two decimal places.\nTo date, only patient A010 has a bmi greater than 50.\n\n\nCode\nbody_measurement_data &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \n                  \"weight\", \"height\")) |&gt;\n  dplyr::mutate(\n    height_cm = .data[[\"height\"]],\n    weight_kg = .data[[\"weight\"]],\n    bsa_m2 = sqrt((.data[[\"height_cm\"]] * .data[[\"weight_kg\"]]) / 3600),\n    bsa_m2 = harmonisation::round_to_nearest_digit(.data[[\"bsa_m2\"]], digits = 2),\n    bmi = .data[[\"weight_kg\"]] / ((.data[[\"height_cm\"]] / 100)^2),\n    bmi = harmonisation::round_to_nearest_digit(.data[[\"bmi\"]], digits = 2),\n    height_cm = harmonisation::round_to_nearest_digit(.data[[\"height_cm\"]], digits = 2),\n    weight_kg = harmonisation::round_to_nearest_digit(.data[[\"weight_kg\"]], digits = 2)\n  ) |&gt; \n  pointblank::col_vals_gt(\n    columns = \"bmi\",\n    preconditions = ~ . %&gt;%\n      dplyr::filter(\n        .data[[\"cohort_unique_id\"]] %in% c(\"A010\")\n      ),\n    value = 50,\n    na_pass = TRUE    \n  ) |&gt; \n  pointblank::col_vals_between(\n    columns = \"bmi\",\n    preconditions = ~ . %&gt;%\n      dplyr::filter(\n        !.data[[\"cohort_unique_id\"]] %in% c(\"A010\")\n      ),\n    left = 10,\n    right = 50,\n    inclusive = c(TRUE, TRUE),\n    na_pass = TRUE\n  )  \n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  body_measurement_data |&gt;\n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nbody_measurement_data &lt;- body_measurement_data |&gt;\n  dplyr::select(-c(\"height\", \"weight\"))\n\n\n\n\n3.3 Smoking History\nsmoke_current will be mapped from the column smoke_current_good. smoke_past will be mapped from the column smoke_past_good.\nWe do a check to ensure that we can only have these scenarios\n\nsmoke_current as 1 and smoke_past as 0 for current smokers\nsmoke_current as 0 and smoke_past as 1 for past smokers\nsmoke_current as 0 and smoke_past as 0 for non-smokers\nsmoke_current as -1 and smoke_past as -1 for unknown\n\n\n\nCode\nsmoking_data &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \n                  \"smoke_current_good\", \"smoke_past_good\")) |&gt;\n  dplyr::mutate(\n    smoke_current = as.character(.data[[\"smoke_current_good\"]]),\n    smoke_current_good = forcats::fct_relevel(\n      as.character(.data[[\"smoke_current_good\"]]),\n      c(\"0\", \"1\")),    \n    smoke_current = forcats::fct_relevel(\n      .data[[\"smoke_current\"]],\n      c(\"0\", \"1\")),\n    smoke_past = as.character(.data[[\"smoke_past_good\"]]),\n    smoke_past_good = forcats::fct_relevel(\n      as.character(.data[[\"smoke_past_good\"]]),\n      c(\"0\", \"1\")),     \n    smoke_past = forcats::fct_relevel(\n      .data[[\"smoke_past\"]],\n      c(\"0\", \"1\")),\n  ) |&gt;\n  pointblank::col_vals_in_set(\n    columns = c(\"smoke_current\", \"smoke_past\"),\n    set = c(\"0\", \"1\", \"-1\")\n  ) |&gt; \n  pointblank::col_vals_expr(\n    expr = pointblank::expr(\n      (.data[[\"smoke_current\"]] == \"1\" & .data[[\"smoke_past\"]] == \"0\") |\n      (.data[[\"smoke_current\"]] == \"-1\" & .data[[\"smoke_past\"]] == -\"1\") |\n      (.data[[\"smoke_current\"]] == \"0\" & .data[[\"smoke_past\"]] %in% c(\"0\", \"1\"))\n    )\n  )\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  smoking_data |&gt;\n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nsmoking_data &lt;- smoking_data |&gt;\n  dplyr::select(-c(\"smoke_current_good\", \"smoke_past_good\"))\n\n\nHere is a case when the validation has failed.\n\n\nCode\nsmoking_data_bad &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \n                  \"smoke_current_bad\", \"smoke_past_bad\")) |&gt;\n  dplyr::filter(\n      .data[[\"cohort_unique_id\"]] %in% c(\"A010\", \"A016\")\n  ) |&gt; \n  dplyr::mutate(\n    smoke_current = as.character(.data[[\"smoke_current_bad\"]]),\n    smoke_past = as.character(.data[[\"smoke_past_bad\"]]),\n  )\n\nsmoking_data_bad |&gt; \n  pointblank::col_vals_in_set(\n    columns = c(\"smoke_current\", \"smoke_past\"),\n    set = c(\"0\", \"1\")\n  ) |&gt; \n  pointblank::col_vals_expr(\n    expr = pointblank::expr(\n      (.data[[\"smoke_current\"]] == \"1\" & .data[[\"smoke_past\"]] == \"0\") |\n      (.data[[\"smoke_current\"]] == \"-1\" & .data[[\"smoke_past\"]] == \"-1\") |\n      (.data[[\"smoke_current\"]] == \"0\" & .data[[\"smoke_past\"]] %in% c(\"0\", \"1\"))\n    )\n  )\n\n\nError: The `col_vals_expr()` validation failed beyond the absolute threshold level (1).\n* failure level (2) &gt;= failure threshold (1)\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  smoking_data_bad |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\n\n\n3.4 Chest Pain\n\n3.4.1 Shortness of Breath\nhave_sob values remained unchanged.\n\n\nCode\nshortness_of_breath_data &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \"have_sob\")) |&gt;\n  dplyr::mutate(\n    have_sob = forcats::fct_relevel(\n      as.character(.data[[\"have_sob\"]]),\n      c(\"0\", \"1\"))\n  ) |&gt;\n  pointblank::col_vals_in_set(\n    columns = c(\"have_sob\"),\n    set = c(\"0\", \"1\", \"-1\")\n  ) \n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  shortness_of_breath_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\n\n\n3.4.2 Have chest pain or not\nhave_chest_pain is grouped as follows:\n\n\n\n\n\n\n\n\nchest_pain_type\nhave_chest_pain\n\n\n\n\n0\n0\n\n\n1, 2 or 3\n1\n\n\n\n\n\n\nCode\nhave_chest_pain_data &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \"chest_pain_type\")) |&gt;\n  dplyr::mutate(\n    have_chest_pain = dplyr::case_when(\n      .data[[\"chest_pain_type\"]] %in% c(0) ~ \"0\",\n      .data[[\"chest_pain_type\"]] %in% c(1, 2, 3) ~ \"1\",\n      .default = NA_character_\n    ),\n    have_chest_pain = forcats::fct_relevel(\n      .data[[\"have_chest_pain\"]],\n      c(\"0\", \"1\")\n    ),\n    chest_pain_type = forcats::fct_relevel(\n      as.character(.data[[\"chest_pain_type\"]]),\n      c(\"0\", \"1\", \"2\", \"3\", \"4\", \"-1\")\n    )\n  ) |&gt;\n  pointblank::col_vals_in_set(\n    columns = c(\"have_chest_pain\"),\n    set = c(\"0\", \"1\")\n  )  \n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  have_chest_pain_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nhave_chest_pain_data &lt;- have_chest_pain_data |&gt;\n  dplyr::select(-c(\"chest_pain_type\"))\n\n\n\n\n3.4.3 Symptomatic or Asymptomatic\nsymptoms is grouped as follows:\n\n\n\n\n\n\n\n\n\nhave_sob\nhave_chest_pain\nsymptoms\n\n\n\n\n-1\n-1\n-1\n\n\n0\n0\n0\n\n\n0 or 1\n1\n1\n\n\n1\n0\n2\n\n\n\n\n\n\nCode\nsymptoms_data &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\")) |&gt;\n  dplyr::inner_join(shortness_of_breath_data, \n                   by = dplyr::join_by(\"cohort_unique_id\"),\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::inner_join(have_chest_pain_data, \n                   by = dplyr::join_by(\"cohort_unique_id\"),\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;                   \n  dplyr::mutate(\n    symptoms = dplyr::case_when(\n      (.data[[\"have_chest_pain\"]] == \"-1\" &\n       .data[[\"have_sob\"]] == \"-1\"\n      ) ~ \"-1\",\n      (.data[[\"have_chest_pain\"]] == \"0\" &\n       .data[[\"have_sob\"]] == \"0\" \n      ) ~ \"0\",        \n      (.data[[\"have_chest_pain\"]] == \"1\" &\n       .data[[\"have_sob\"]] %in% c(\"0\", \"1\")\n      ) ~ \"1\", \n      (.data[[\"have_chest_pain\"]] == \"0\" &\n       .data[[\"have_sob\"]] == \"1\" \n      ) ~ \"2\",  \n      .default = NA_character_\n    ),\n    symptoms = forcats::fct_relevel(\n      .data[[\"symptoms\"]],\n      c(\"0\", \"1\", \"2\"))\n  ) |&gt; \n  pointblank::col_vals_in_set(\n    columns = c(\"symptoms\"),\n    set = c(\"0\", \"1\", \"2\")\n  )\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  symptoms_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nsymptoms_data &lt;- symptoms_data |&gt;\n  dplyr::select(-c(\"have_chest_pain\", \"have_sob\"))\n\n\n\n\n3.4.4 Chest Pain Type\nchest_pain_type is grouped as follows:\n\n\n\n\n\n\n\n\n\nhave_sob\nchest_pain_type before\nchest_pain_type\n\n\n\n\n-1\n-1\n-1\n\n\n0\n0\n0\n\n\n0 or 1\n1\n1\n\n\n0 or 1\n2\n2\n\n\n0 or 1\n3\n2\n\n\n1\n0\n4\n\n\n\n\n\n\nCode\nchest_pain_type_data &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\", \"chest_pain_type\")) |&gt;\n  dplyr::inner_join(shortness_of_breath_data, \n                   by = dplyr::join_by(\"cohort_unique_id\"),\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::mutate(\n    chest_pain_type_before = .data[[\"chest_pain_type\"]],\n    chest_pain_type = dplyr::case_when(\n      (.data[[\"chest_pain_type_before\"]] == \"-1\" &\n       .data[[\"have_sob\"]] == \"-1\"\n      ) ~ \"-1\",\n      (.data[[\"chest_pain_type_before\"]] == \"0\" &\n       .data[[\"have_sob\"]] == \"0\" \n      ) ~ \"0\",        \n      (.data[[\"chest_pain_type_before\"]] == \"1\" &\n       .data[[\"have_sob\"]] %in% c(\"0\", \"1\")\n      ) ~ \"1\",\n      (.data[[\"chest_pain_type_before\"]] == \"2\" &\n       .data[[\"have_sob\"]] %in% c(\"0\", \"1\")\n      ) ~ \"2\", \n      (.data[[\"chest_pain_type_before\"]] == \"3\" &\n       .data[[\"have_sob\"]] %in% c(\"0\", \"1\")\n      ) ~ \"3\", \n      (.data[[\"chest_pain_type_before\"]] == \"0\" &\n       .data[[\"have_sob\"]] == \"1\" \n      ) ~ \"4\",  \n      .default = NA_character_\n    ),\n    chest_pain_type_before = forcats::fct_relevel(\n      as.character(.data[[\"chest_pain_type_before\"]]),\n      c(\"0\", \"1\", \"2\", \"3\")),\n    chest_pain_type = forcats::fct_relevel(\n      .data[[\"chest_pain_type\"]],\n      c(\"0\", \"1\", \"2\", \"3\"))\n  ) |&gt; \n  dplyr::relocate(\n    \"chest_pain_type_before\",\n    .before = \"cohort_unique_id\"\n  ) |&gt; \n  pointblank::col_vals_in_set(\n    columns = c(\"chest_pain_type\"),\n    set = c(\"0\", \"1\", \"2\", \"3\", \"4\")\n  )\n\n\n\n\nCode\nif (params$show_table && knitr::is_html_output()) {\n  chest_pain_type_data |&gt; \n    harmonisation::reactable_with_download_csv_button()\n}\n\n\n\n\n\n\nDownload as CSV\n\n\n\nRemove unnecessary columns so that we can merge with the other fields.\n\n\nCode\nchest_pain_type_data &lt;- chest_pain_type_data |&gt;\n  dplyr::select(-c(\"have_sob\", \"chest_pain_type_before\"))\n\n\n\n\n3.4.5 Combined chest pain related tables\nWe combine all chest related tables together\n\n\nCode\njoin_specification &lt;- dplyr::join_by(\"cohort_unique_id\")\n\nchest_pain_data &lt;- cohort_A_data |&gt; \n  dplyr::select(c(\"cohort_unique_id\")) |&gt; \n  dplyr::inner_join(have_chest_pain_data, \n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::inner_join(chest_pain_type_data, \n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::inner_join(shortness_of_breath_data, \n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt; \n  dplyr::inner_join(symptoms_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\")\n\ntestthat::expect_true(\n  pointblank::has_columns(\n    chest_pain_data,\n    columns = c(\"have_sob\", \"have_chest_pain\", \"symptoms\", \"chest_pain_type\")\n  )\n) \n\ntestthat::expect_equal(\n  ncol(chest_pain_data), 5\n) \n\n\n\n\n\n3.5 Combine Demographics\nWe combine all the data to give the demo_behave_data.\n\n\nCode\njoin_specification &lt;- dplyr::join_by(\"cohort_unique_id\")\n\ndemo_behave_data &lt;- cohort_A_data |&gt;\n  dplyr::select(c(\"cohort_unique_id\")) |&gt;\n  dplyr::inner_join(age_gender_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;\n  dplyr::inner_join(body_measurement_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;\n  dplyr::inner_join(smoking_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;\n  dplyr::inner_join(chest_pain_data,\n                   by = join_specification,\n                   unmatched = \"error\",\n                   relationship = \"one-to-one\") |&gt;\n  dplyr::relocate(c(\"bsa_m2\", \"bmi\"),\n                  .after = \"sex\")\n\n\ntestthat::expect_true(\n  pointblank::has_columns(\n    demo_behave_data,\n    columns = c(\n      \"age_years\", \"sex\",\n      \"height_cm\", \"weight_kg\", \"bsa_m2\", \"bmi\",\n      \"smoke_current\", \"smoke_past\",\n      \"have_sob\", \"have_chest_pain\",\n      \"symptoms\", \"chest_pain_type\"\n    )\n  )\n) \n\ntestthat::expect_equal(\n  ncol(demo_behave_data), 13\n)",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extract Demographic</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/02_Extract_Demographic.html#write-preprocessed-file",
    "href": "codes/Cohort_A/02_Extract_Demographic.html#write-preprocessed-file",
    "title": "3  Extract Demographic",
    "section": "4 Write Preprocessed File",
    "text": "4 Write Preprocessed File\nWe output data to be used for the next session.\n\n\nCode\ndemo_behave_data |&gt;\n  fst::write_fst(\n    path = here::here(\n      params$analysis_folder,\n      params$harmonisation_folder,\n      params$preprocessing_folder,\n      \"02_demographic_data.fst\"),\n)",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Extract Demographic</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/03_Export_To_Excel.html",
    "href": "codes/Cohort_A/03_Export_To_Excel.html",
    "title": "4  Export To Excel",
    "section": "",
    "text": "1 Read all tabular data\nWe read all tabular data from the previous section.",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Export To Excel</span>"
    ]
  },
  {
    "objectID": "codes/Cohort_A/03_Export_To_Excel.html#export-data-as-excel",
    "href": "codes/Cohort_A/03_Export_To_Excel.html#export-data-as-excel",
    "title": "4  Export To Excel",
    "section": "2 Export Data as Excel",
    "text": "2 Export Data as Excel\nWe export the standardised data to an excel file called harmonised_Cohort_A.xlsx\n\n\nCode\n# Create a new workbook\nmy_workbook &lt;- openxlsx::createWorkbook()\n\nsheet_name = c(\"demographics\")\n\noutput_data = list(demo_behave_data)  |&gt; \n  purrr::map(\n    .f = harmonisation::add_cohort_name,\n    cohort_name = params$cohort_name,\n    cohort_name_column = \"cohort_name\"\n  )\n\npurrr::walk2(\n    .x = sheet_name,\n    .y = output_data,\n    .f = harmonisation::write_to_sheet,\n    workbook = my_workbook\n)\n\n# Save workbook\nopenxlsx::saveWorkbook(\n  wb = my_workbook, \n  file = here::here(params$analysis_folder,\n                    params$output_folder,\n                    params$cleaned_folder,\n                    params$output_excel_file),\n  overwrite = TRUE\n)",
    "crumbs": [
      "Cohort A Cleaning",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Export To Excel</span>"
    ]
  }
]